name: "Inception_v2"
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "examples/imagenet/ilsvrc12_train_lmdb"
    batch_size: 32
#    batch_size: 256	# DGX1
    backend: LMDB
  }
  transform_param {
    mirror: true
    crop_size: 224
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
  }
  include {    phase: TRAIN  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "examples/imagenet/ilsvrc12_val_lmdb"
    batch_size: 32
    backend: LMDB
  }
  transform_param {
    mirror: false
    crop_size: 224
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
  }
  include {    phase: TEST  }
}
layer {
 bottom: "data"
  top: "conv1/7x7_s2"
  name: "conv1/7x7_s2"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "conv1/7x7_s2"
  name: "conv1/7x7_s2/bn"
  top: "conv1/7x7_s2/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "conv1/7x7_s2/bn"
  top: "conv1/7x7_s2/bn"
  name: "conv1/7x7_s2/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "conv1/7x7_s2/bn"
  top: "pool1/3x3_s2"
  name: "pool1/3x3_s2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
 bottom: "pool1/3x3_s2"
  top: "conv2/3x3_reduce"
  name: "conv2/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "conv2/3x3_reduce"
  name: "conv2/3x3_reduce/bn"
  top: "conv2/3x3_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "conv2/3x3_reduce/bn"
  top: "conv2/3x3_reduce/bn"
  name: "conv2/3x3_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "conv2/3x3_reduce/bn"
  top: "conv2/3x3"
  name: "conv2/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "conv2/3x3"
  name: "conv2/3x3/bn"
  top: "conv2/3x3/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "conv2/3x3/bn"
  top: "conv2/3x3/bn"
  name: "conv2/3x3/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "conv2/3x3/bn"
  top: "pool2/3x3_s2"
  name: "pool2/3x3_s2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
 bottom: "pool2/3x3_s2"
  top: "inception_3a/1x1"
  name: "inception_3a/1x1"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/1x1"
  name: "inception_3a/1x1/bn"
  top: "inception_3a/1x1/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3a/1x1/bn"
  top: "inception_3a/1x1/bn"
  name: "inception_3a/1x1/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "pool2/3x3_s2"
  top: "inception_3a/3x3_reduce"
  name: "inception_3a/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/3x3_reduce"
  name: "inception_3a/3x3_reduce/bn"
  top: "inception_3a/3x3_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3a/3x3_reduce/bn"
  top: "inception_3a/3x3_reduce/bn"
  name: "inception_3a/3x3_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3a/3x3_reduce/bn"
  top: "inception_3a/3x3"
  name: "inception_3a/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/3x3"
  name: "inception_3a/3x3/bn"
  top: "inception_3a/3x3/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3a/3x3/bn"
  top: "inception_3a/3x3/bn"
  name: "inception_3a/3x3/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "pool2/3x3_s2"
  top: "inception_3a/5x5_reduce"
  name: "inception_3a/5x5_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/5x5_reduce"
  name: "inception_3a/5x5_reduce/bn"
  top: "inception_3a/5x5_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3a/5x5_reduce/bn"
  top: "inception_3a/5x5_reduce/bn"
  name: "inception_3a/5x5_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3a/5x5_reduce/bn"
  top: "inception_3a/5x5b"
  name: "inception_3a/5x5b"
  type: "Convolution"
  convolution_param {
    num_output: 96
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/5x5b"
  name: "inception_3a/5x5b/bn"
  top: "inception_3a/5x5b/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3a/5x5b/bn"
  top: "inception_3a/5x5b/bn"
  name: "inception_3a/5x5b/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "pool2/3x3_s2"
  top: "inception_3a/pool"
  name: "inception_3a/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    pad: 1
  }
}
layer {
 bottom: "inception_3a/pool"
  top: "inception_3a/pool_proj"
  name: "inception_3a/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 32
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/pool_proj"
  name: "inception_3a/pool_proj/bn"
  top: "inception_3a/pool_proj/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3a/pool_proj/bn"
  top: "inception_3a/pool_proj/bn"
  name: "inception_3a/pool_proj/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_3a/1x1/bn"
  bottom: "inception_3a/3x3/bn"
  bottom: "inception_3a/5x5b/bn"
  bottom: "inception_3a/pool_proj/bn"
  top: "inception_3a/output"
  name: "inception_3a/output"
  type: "Concat"
}
layer {
 bottom: "inception_3a/output"
  top: "inception_3b/1x1"
  name: "inception_3b/1x1"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/1x1"
  name: "inception_3b/1x1/bn"
  top: "inception_3b/1x1/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3b/1x1/bn"
  top: "inception_3b/1x1/bn"
  name: "inception_3b/1x1/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3a/output"
  top: "inception_3b/3x3_reduce"
  name: "inception_3b/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/3x3_reduce"
  name: "inception_3b/3x3_reduce/bn"
  top: "inception_3b/3x3_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3b/3x3_reduce/bn"
  top: "inception_3b/3x3_reduce/bn"
  name: "inception_3b/3x3_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3b/3x3_reduce/bn"
  top: "inception_3b/3x3"
  name: "inception_3b/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/3x3"
  name: "inception_3b/3x3/bn"
  top: "inception_3b/3x3/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3b/3x3/bn"
  top: "inception_3b/3x3/bn"
  name: "inception_3b/3x3/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3a/output"
  top: "inception_3b/5x5_reduce"
  name: "inception_3b/5x5_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/5x5_reduce"
  name: "inception_3b/5x5_reduce/bn"
  top: "inception_3b/5x5_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3b/5x5_reduce/bn"
  top: "inception_3b/5x5_reduce/bn"
  name: "inception_3b/5x5_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3b/5x5_reduce/bn"
  top: "inception_3b/5x5b"
  name: "inception_3b/5x5b"
  type: "Convolution"
  convolution_param {
    num_output: 96
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/5x5b"
  name: "inception_3b/5x5b/bn"
  top: "inception_3b/5x5b/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3b/5x5b/bn"
  top: "inception_3b/5x5b/bn"
  name: "inception_3b/5x5b/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_3a/output"
  top: "inception_3b/pool"
  name: "inception_3b/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    pad: 1
  }
}
layer {
 bottom: "inception_3b/pool"
  top: "inception_3b/pool_proj"
  name: "inception_3b/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/pool_proj"
  name: "inception_3b/pool_proj/bn"
  top: "inception_3b/pool_proj/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3b/pool_proj/bn"
  top: "inception_3b/pool_proj/bn"
  name: "inception_3b/pool_proj/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_3b/1x1/bn"
  bottom: "inception_3b/3x3/bn"
  bottom: "inception_3b/5x5b/bn"
  bottom: "inception_3b/pool_proj/bn"
  top: "inception_3b/output"
  name: "inception_3b/output"
  type: "Concat"
}
layer {
 bottom: "inception_3b/output"
  top: "inception_3c/3x3_reduce"
  name: "inception_3c/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/3x3_reduce"
  name: "inception_3c/3x3_reduce/bn"
  top: "inception_3c/3x3_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3c/3x3_reduce/bn"
  top: "inception_3c/3x3_reduce/bn"
  name: "inception_3c/3x3_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3c/3x3_reduce/bn"
  top: "inception_3c/3x3"
  name: "inception_3c/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/3x3"
  name: "inception_3c/3x3/bn"
  top: "inception_3c/3x3/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3c/3x3/bn"
  top: "inception_3c/3x3/bn"
  name: "inception_3c/3x3/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3b/output"
  top: "inception_3c/5x5_reduce"
  name: "inception_3c/5x5_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/5x5_reduce"
  name: "inception_3c/5x5_reduce/bn"
  top: "inception_3c/5x5_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3c/5x5_reduce/bn"
  top: "inception_3c/5x5_reduce/bn"
  name: "inception_3c/5x5_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3c/5x5_reduce/bn"
  top: "inception_3c/5x5b"
  name: "inception_3c/5x5b"
  type: "Convolution"
  convolution_param {
    num_output: 96
    pad: 2
    kernel_size: 5
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/5x5b"
  name: "inception_3c/5x5b/bn"
  top: "inception_3c/5x5b/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_3c/5x5b/bn"
  top: "inception_3c/5x5b/bn"
  name: "inception_3c/5x5b/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_3b/output"
  top: "inception_3c/pool"
  name: "inception_3c/pool"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "inception_3c/3x3/bn"
  bottom: "inception_3c/5x5b/bn"
  bottom: "inception_3c/pool"
  top: "inception_3c/output"
  name: "inception_3c/output"
  type: "Concat"
}
layer {
  bottom: "inception_3c/output"
  top: "pool3/5x5_s3"
  name: "pool3/5x5_s3"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 5
    stride: 3
  }
}
layer {
 bottom: "pool3/5x5_s3"
  top: "loss1/conv"
  name: "loss1/conv"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss1/conv"
  name: "loss1/conv/bn"
  top: "loss1/conv/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "loss1/conv/bn"
  top: "loss1/conv/bn"
  name: "loss1/conv/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "loss1/conv/bn"
  top: "loss1/fc"
  name: "loss1/fc"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss1/fc"
  top: "loss1/fc"
  name: "loss1/fc/relu"
  type: "ReLU"
}
layer {
  bottom: "loss1/fc"
  top: "loss1/classifier"
  name: "loss1/classifier"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "loss1/classifier"
  bottom: "label"
  top: "loss1/loss"
  name: "loss1/loss"
  type: "SoftmaxWithLoss"
  loss_weight: 0.3
}
layer {
  bottom: "loss1/classifier"
  top: "loss1/prob"
  name: "loss1/prob"
  type: "Softmax"
  include {
    phase: TEST
  }
}
layer {
  bottom: "loss1/prob"
  bottom: "label"
  top: "loss1/top-1"
  name: "loss1/top-1"
  type: "Accuracy"
  include {    phase: TEST  }
}
layer {
  bottom: "loss1/prob"
  bottom: "label"
  top: "loss1/top-5"
  name: "loss1/top-5"
  type: "Accuracy"
  include {    phase: TEST  }
  accuracy_param {
    top_k: 5
  }
}
layer {
 bottom: "inception_3c/output"
  top: "inception_4a/1x1"
  name: "inception_4a/1x1"
  type: "Convolution"
  convolution_param {
    num_output: 224
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/1x1"
  name: "inception_4a/1x1/bn"
  top: "inception_4a/1x1/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4a/1x1/bn"
  top: "inception_4a/1x1/bn"
  name: "inception_4a/1x1/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3c/output"
  top: "inception_4a/3x3_reduce"
  name: "inception_4a/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/3x3_reduce"
  name: "inception_4a/3x3_reduce/bn"
  top: "inception_4a/3x3_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4a/3x3_reduce/bn"
  top: "inception_4a/3x3_reduce/bn"
  name: "inception_4a/3x3_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4a/3x3_reduce/bn"
  top: "inception_4a/3x3"
  name: "inception_4a/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/3x3"
  name: "inception_4a/3x3/bn"
  top: "inception_4a/3x3/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4a/3x3/bn"
  top: "inception_4a/3x3/bn"
  name: "inception_4a/3x3/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3c/output"
  top: "inception_4a/5x5_reduce"
  name: "inception_4a/5x5_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 96
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/5x5_reduce"
  name: "inception_4a/5x5_reduce/bn"
  top: "inception_4a/5x5_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4a/5x5_reduce/bn"
  top: "inception_4a/5x5_reduce/bn"
  name: "inception_4a/5x5_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4a/5x5_reduce/bn"
  top: "inception_4a/5x5b"
  name: "inception_4a/5x5b"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/5x5b"
  name: "inception_4a/5x5b/bn"
  top: "inception_4a/5x5b/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4a/5x5b/bn"
  top: "inception_4a/5x5b/bn"
  name: "inception_4a/5x5b/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_3c/output"
  top: "inception_4a/pool"
  name: "inception_4a/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    pad: 1
  }
}
layer {
 bottom: "inception_4a/pool"
  top: "inception_4a/pool_proj"
  name: "inception_4a/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/pool_proj"
  name: "inception_4a/pool_proj/bn"
  top: "inception_4a/pool_proj/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4a/pool_proj/bn"
  top: "inception_4a/pool_proj/bn"
  name: "inception_4a/pool_proj/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4a/1x1/bn"
  bottom: "inception_4a/3x3/bn"
  bottom: "inception_4a/5x5b/bn"
  bottom: "inception_4a/pool_proj/bn"
  top: "inception_4a/output"
  name: "inception_4a/output"
  type: "Concat"
}
layer {
 bottom: "inception_4a/output"
  top: "inception_4b/1x1"
  name: "inception_4b/1x1"
  type: "Convolution"
  convolution_param {
    num_output: 192
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/1x1"
  name: "inception_4b/1x1/bn"
  top: "inception_4b/1x1/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4b/1x1/bn"
  top: "inception_4b/1x1/bn"
  name: "inception_4b/1x1/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4a/output"
  top: "inception_4b/3x3_reduce"
  name: "inception_4b/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 96
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/3x3_reduce"
  name: "inception_4b/3x3_reduce/bn"
  top: "inception_4b/3x3_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4b/3x3_reduce/bn"
  top: "inception_4b/3x3_reduce/bn"
  name: "inception_4b/3x3_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4b/3x3_reduce/bn"
  top: "inception_4b/3x3"
  name: "inception_4b/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/3x3"
  name: "inception_4b/3x3/bn"
  top: "inception_4b/3x3/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4b/3x3/bn"
  top: "inception_4b/3x3/bn"
  name: "inception_4b/3x3/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4a/output"
  top: "inception_4b/5x5_reduce"
  name: "inception_4b/5x5_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 96
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/5x5_reduce"
  name: "inception_4b/5x5_reduce/bn"
  top: "inception_4b/5x5_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4b/5x5_reduce/bn"
  top: "inception_4b/5x5_reduce/bn"
  name: "inception_4b/5x5_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4b/5x5_reduce/bn"
  top: "inception_4b/5x5b"
  name: "inception_4b/5x5b"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/5x5b"
  name: "inception_4b/5x5b/bn"
  top: "inception_4b/5x5b/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4b/5x5b/bn"
  top: "inception_4b/5x5b/bn"
  name: "inception_4b/5x5b/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4a/output"
  top: "inception_4b/pool"
  name: "inception_4b/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    pad: 1
  }
}
layer {
 bottom: "inception_4b/pool"
  top: "inception_4b/pool_proj"
  name: "inception_4b/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/pool_proj"
  name: "inception_4b/pool_proj/bn"
  top: "inception_4b/pool_proj/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4b/pool_proj/bn"
  top: "inception_4b/pool_proj/bn"
  name: "inception_4b/pool_proj/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4b/1x1/bn"
  bottom: "inception_4b/3x3/bn"
  bottom: "inception_4b/5x5b/bn"
  bottom: "inception_4b/pool_proj/bn"
  top: "inception_4b/output"
  name: "inception_4b/output"
  type: "Concat"
}
layer {
 bottom: "inception_4b/output"
  top: "inception_4c/1x1"
  name: "inception_4c/1x1"
  type: "Convolution"
  convolution_param {
    num_output: 160
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/1x1"
  name: "inception_4c/1x1/bn"
  top: "inception_4c/1x1/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4c/1x1/bn"
  top: "inception_4c/1x1/bn"
  name: "inception_4c/1x1/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4b/output"
  top: "inception_4c/3x3_reduce"
  name: "inception_4c/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/3x3_reduce"
  name: "inception_4c/3x3_reduce/bn"
  top: "inception_4c/3x3_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4c/3x3_reduce/bn"
  top: "inception_4c/3x3_reduce/bn"
  name: "inception_4c/3x3_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4c/3x3_reduce/bn"
  top: "inception_4c/3x3"
  name: "inception_4c/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/3x3"
  name: "inception_4c/3x3/bn"
  top: "inception_4c/3x3/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4c/3x3/bn"
  top: "inception_4c/3x3/bn"
  name: "inception_4c/3x3/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4b/output"
  top: "inception_4c/5x5_reduce"
  name: "inception_4c/5x5_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/5x5_reduce"
  name: "inception_4c/5x5_reduce/bn"
  top: "inception_4c/5x5_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4c/5x5_reduce/bn"
  top: "inception_4c/5x5_reduce/bn"
  name: "inception_4c/5x5_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4c/5x5_reduce/bn"
  top: "inception_4c/5x5b"
  name: "inception_4c/5x5b"
  type: "Convolution"
  convolution_param {
    num_output: 160
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/5x5b"
  name: "inception_4c/5x5b/bn"
  top: "inception_4c/5x5b/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4c/5x5b/bn"
  top: "inception_4c/5x5b/bn"
  name: "inception_4c/5x5b/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4b/output"
  top: "inception_4c/pool"
  name: "inception_4c/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    pad: 1
  }
}
layer {
 bottom: "inception_4c/pool"
  top: "inception_4c/pool_proj"
  name: "inception_4c/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 96
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/pool_proj"
  name: "inception_4c/pool_proj/bn"
  top: "inception_4c/pool_proj/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4c/pool_proj/bn"
  top: "inception_4c/pool_proj/bn"
  name: "inception_4c/pool_proj/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4c/1x1/bn"
  bottom: "inception_4c/3x3/bn"
  bottom: "inception_4c/5x5b/bn"
  bottom: "inception_4c/pool_proj/bn"
  top: "inception_4c/output"
  name: "inception_4c/output"
  type: "Concat"
}
layer {
 bottom: "inception_4c/output"
  top: "inception_4d/1x1"
  name: "inception_4d/1x1"
  type: "Convolution"
  convolution_param {
    num_output: 96
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/1x1"
  name: "inception_4d/1x1/bn"
  top: "inception_4d/1x1/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4d/1x1/bn"
  top: "inception_4d/1x1/bn"
  name: "inception_4d/1x1/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4c/output"
  top: "inception_4d/3x3_reduce"
  name: "inception_4d/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/3x3_reduce"
  name: "inception_4d/3x3_reduce/bn"
  top: "inception_4d/3x3_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4d/3x3_reduce/bn"
  top: "inception_4d/3x3_reduce/bn"
  name: "inception_4d/3x3_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4d/3x3_reduce/bn"
  top: "inception_4d/3x3"
  name: "inception_4d/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/3x3"
  name: "inception_4d/3x3/bn"
  top: "inception_4d/3x3/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4d/3x3/bn"
  top: "inception_4d/3x3/bn"
  name: "inception_4d/3x3/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4c/output"
  top: "inception_4d/5x5_reduce"
  name: "inception_4d/5x5_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 160
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/5x5_reduce"
  name: "inception_4d/5x5_reduce/bn"
  top: "inception_4d/5x5_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4d/5x5_reduce/bn"
  top: "inception_4d/5x5_reduce/bn"
  name: "inception_4d/5x5_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4d/5x5_reduce/bn"
  top: "inception_4d/5x5b"
  name: "inception_4d/5x5b"
  type: "Convolution"
  convolution_param {
    num_output: 192
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/5x5b"
  name: "inception_4d/5x5b/bn"
  top: "inception_4d/5x5b/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4d/5x5b/bn"
  top: "inception_4d/5x5b/bn"
  name: "inception_4d/5x5b/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4c/output"
  top: "inception_4d/pool"
  name: "inception_4d/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    pad: 1
  }
}
layer {
 bottom: "inception_4d/pool"
  top: "inception_4d/pool_proj"
  name: "inception_4d/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 96
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/pool_proj"
  name: "inception_4d/pool_proj/bn"
  top: "inception_4d/pool_proj/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4d/pool_proj/bn"
  top: "inception_4d/pool_proj/bn"
  name: "inception_4d/pool_proj/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4d/1x1/bn"
  bottom: "inception_4d/3x3/bn"
  bottom: "inception_4d/5x5b/bn"
  bottom: "inception_4d/pool_proj/bn"
  top: "inception_4d/output"
  name: "inception_4d/output"
  type: "Concat"
}
layer {
 bottom: "inception_4d/output"
  top: "inception_4e/3x3_reduce"
  name: "inception_4e/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/3x3_reduce"
  name: "inception_4e/3x3_reduce/bn"
  top: "inception_4e/3x3_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4e/3x3_reduce/bn"
  top: "inception_4e/3x3_reduce/bn"
  name: "inception_4e/3x3_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4e/3x3_reduce/bn"
  top: "inception_4e/3x3"
  name: "inception_4e/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/3x3"
  name: "inception_4e/3x3/bn"
  top: "inception_4e/3x3/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4e/3x3/bn"
  top: "inception_4e/3x3/bn"
  name: "inception_4e/3x3/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4d/output"
  top: "inception_4e/5x5_reduce"
  name: "inception_4e/5x5_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 192
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/5x5_reduce"
  name: "inception_4e/5x5_reduce/bn"
  top: "inception_4e/5x5_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4e/5x5_reduce/bn"
  top: "inception_4e/5x5_reduce/bn"
  name: "inception_4e/5x5_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4e/5x5_reduce/bn"
  top: "inception_4e/5x5b"
  name: "inception_4e/5x5b"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/5x5b"
  name: "inception_4e/5x5b/bn"
  top: "inception_4e/5x5b/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_4e/5x5b/bn"
  top: "inception_4e/5x5b/bn"
  name: "inception_4e/5x5b/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4d/output"
  top: "inception_4e/pool"
  name: "inception_4e/pool"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "inception_4e/3x3/bn"
  bottom: "inception_4e/5x5b/bn"
  bottom: "inception_4e/pool"
  top: "inception_4e/output"
  name: "inception_4e/output"
  type: "Concat"
}
layer {
  bottom: "inception_4e/output"
  top: "pool4/5x5_s3"
  name: "pool4/5x5_s3"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 5
    stride: 3
  }
}
layer {
 bottom: "pool4/5x5_s3"
  top: "loss2/conv"
  name: "loss2/conv"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss2/conv"
  name: "loss2/conv/bn"
  top: "loss2/conv/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "loss2/conv/bn"
  top: "loss2/conv/bn"
  name: "loss2/conv/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "loss2/conv/bn"
  top: "loss2/fc"
  name: "loss2/fc"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss2/fc"
  top: "loss2/fc"
  name: "loss2/fc/relu"
  type: "ReLU"
}
layer {
  bottom: "loss2/fc"
  top: "loss2/classifier"
  name: "loss2/classifier"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "loss2/classifier"
  bottom: "label"
  top: "loss2/loss"
  name: "loss2/loss"
  type: "SoftmaxWithLoss"
  loss_weight: 0.3
}
layer {
  bottom: "loss2/classifier"
  top: "loss2/prob"
  name: "loss2/prob"
  type: "Softmax"
  include {
    phase: TEST
  }
}
layer {
  bottom: "loss2/prob"
  bottom: "label"
  top: "loss2/top-1"
  name: "loss2/top-1"
  type: "Accuracy"
  include {    phase: TEST  }
}
layer {
  bottom: "loss2/prob"
  bottom: "label"
  top: "loss2/top-5"
  name: "loss2/top-5"
  type: "Accuracy"
  include {    phase: TEST  }
  accuracy_param {
    top_k: 5
  }
}
layer {
 bottom: "inception_4e/output"
  top: "inception_5a/1x1"
  name: "inception_5a/1x1"
  type: "Convolution"
  convolution_param {
    num_output: 352
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/1x1"
  name: "inception_5a/1x1/bn"
  top: "inception_5a/1x1/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5a/1x1/bn"
  top: "inception_5a/1x1/bn"
  name: "inception_5a/1x1/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4e/output"
  top: "inception_5a/3x3_reduce"
  name: "inception_5a/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 192
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/3x3_reduce"
  name: "inception_5a/3x3_reduce/bn"
  top: "inception_5a/3x3_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5a/3x3_reduce/bn"
  top: "inception_5a/3x3_reduce/bn"
  name: "inception_5a/3x3_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5a/3x3_reduce/bn"
  top: "inception_5a/3x3"
  name: "inception_5a/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 320
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/3x3"
  name: "inception_5a/3x3/bn"
  top: "inception_5a/3x3/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5a/3x3/bn"
  top: "inception_5a/3x3/bn"
  name: "inception_5a/3x3/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4e/output"
  top: "inception_5a/5x5_reduce"
  name: "inception_5a/5x5_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 160
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/5x5_reduce"
  name: "inception_5a/5x5_reduce/bn"
  top: "inception_5a/5x5_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5a/5x5_reduce/bn"
  top: "inception_5a/5x5_reduce/bn"
  name: "inception_5a/5x5_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5a/5x5_reduce/bn"
  top: "inception_5a/5x5b"
  name: "inception_5a/5x5b"
  type: "Convolution"
  convolution_param {
    num_output: 224
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/5x5b"
  name: "inception_5a/5x5b/bn"
  top: "inception_5a/5x5b/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5a/5x5b/bn"
  top: "inception_5a/5x5b/bn"
  name: "inception_5a/5x5b/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4e/output"
  top: "inception_5a/pool"
  name: "inception_5a/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    pad: 1
  }
}
layer {
 bottom: "inception_5a/pool"
  top: "inception_5a/pool_proj"
  name: "inception_5a/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/pool_proj"
  name: "inception_5a/pool_proj/bn"
  top: "inception_5a/pool_proj/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5a/pool_proj/bn"
  top: "inception_5a/pool_proj/bn"
  name: "inception_5a/pool_proj/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_5a/1x1/bn"
  bottom: "inception_5a/3x3/bn"
  bottom: "inception_5a/5x5b/bn"
  bottom: "inception_5a/pool_proj/bn"
  top: "inception_5a/output"
  name: "inception_5a/output"
  type: "Concat"
}
layer {
 bottom: "inception_5a/output"
  top: "inception_5b/1x1"
  name: "inception_5b/1x1"
  type: "Convolution"
  convolution_param {
    num_output: 352
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/1x1"
  name: "inception_5b/1x1/bn"
  top: "inception_5b/1x1/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5b/1x1/bn"
  top: "inception_5b/1x1/bn"
  name: "inception_5b/1x1/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5a/output"
  top: "inception_5b/3x3_reduce"
  name: "inception_5b/3x3_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 192
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/3x3_reduce"
  name: "inception_5b/3x3_reduce/bn"
  top: "inception_5b/3x3_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5b/3x3_reduce/bn"
  top: "inception_5b/3x3_reduce/bn"
  name: "inception_5b/3x3_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5b/3x3_reduce/bn"
  top: "inception_5b/3x3"
  name: "inception_5b/3x3"
  type: "Convolution"
  convolution_param {
    num_output: 320
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/3x3"
  name: "inception_5b/3x3/bn"
  top: "inception_5b/3x3/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5b/3x3/bn"
  top: "inception_5b/3x3/bn"
  name: "inception_5b/3x3/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5a/output"
  top: "inception_5b/5x5_reduce"
  name: "inception_5b/5x5_reduce"
  type: "Convolution"
  convolution_param {
    num_output: 192
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/5x5_reduce"
  name: "inception_5b/5x5_reduce/bn"
  top: "inception_5b/5x5_reduce/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5b/5x5_reduce/bn"
  top: "inception_5b/5x5_reduce/bn"
  name: "inception_5b/5x5_reduce/bn/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5b/5x5_reduce/bn"
  top: "inception_5b/5x5b"
  name: "inception_5b/5x5b"
  type: "Convolution"
  convolution_param {
    num_output: 224
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/5x5b"
  name: "inception_5b/5x5b/bn"
  top: "inception_5b/5x5b/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5b/5x5b/bn"
  top: "inception_5b/5x5b/bn"
  name: "inception_5b/5x5b/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_5a/output"
  top: "inception_5b/pool"
  name: "inception_5b/pool"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    pad: 1
  }
}
layer {
 bottom: "inception_5b/pool"
  top: "inception_5b/pool_proj"
  name: "inception_5b/pool_proj"
  type: "Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/pool_proj"
  name: "inception_5b/pool_proj/bn"
  top: "inception_5b/pool_proj/bn"
  type: "BatchNorm"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  bottom: "inception_5b/pool_proj/bn"
  top: "inception_5b/pool_proj/bn"
  name: "inception_5b/pool_proj/bn/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_5b/1x1/bn"
  bottom: "inception_5b/3x3/bn"
  bottom: "inception_5b/5x5b/bn"
  bottom: "inception_5b/pool_proj/bn"
  top: "inception_5b/output"
  name: "inception_5b/output"
  type: "Concat"
}
layer {
  bottom: "inception_5b/output"
  top: "pool5/7x7_s1"
  name: "pool5/7x7_s1"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 7
  }
}
layer {
  bottom: "pool5/7x7_s1"
  top: "loss3/classifier"
  name: "loss3/classifier"
  type: "InnerProduct"
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "loss3/classifier"
  bottom: "label"
  top: "loss"
  name: "loss"
  type: "SoftmaxWithLoss"
  loss_weight: 1
}
layer {
  bottom: "loss3/classifier"
  bottom: "label"
  top: "accuracy/top-1"
  name: "accuracy/top-1"
  type: "Accuracy"
  include {    phase: TEST  }
  accuracy_param { top_k: 1 }
}
layer {
  bottom: "loss3/classifier"
  bottom: "label"
  top: "accuracy/top-5"
  name: "accuracy/top-5"
  type: "Accuracy"
  include {    phase: TEST  }
  accuracy_param { top_k: 5 }
}
