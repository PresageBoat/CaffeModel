#------------------------------------------
# Alexnet wih BatchNorm instead of LRN
# BN after conv layers
#------------------------------------------
name: "AlexNet_bn"

layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  transform_param {
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
    mirror: true
    crop_size: 227
    scale: 0.00390625
  }
  data_param {
    source: "examples/imagenet/ilsvrc12_train_lmdb"
    batch_size: 512
    backend: LMDB
    cache:   true
    shuffle: true 
  }
  include { phase: TRAIN }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  transform_param {
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
    mirror: false
    crop_size: 227
    scale: 0.00390625
  }
  data_param {
    source: "examples/imagenet/ilsvrc12_val_lmdb"
    batch_size: 256         
    backend: LMDB
  }
  include { phase: TEST }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
   bias_term: false
  }
}
layer {
  name: "conv1/bn"
  type: "BatchNorm"
  bottom: "conv1"
  top: "conv1/bn"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1/bn"
  top: "conv1/bn"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1/bn"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
   bias_term: false
  }
}
layer {
  name: "conv2/bn"
  type: "BatchNorm"
  bottom: "conv2"
  top: "conv2/bn"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2/bn"
  top: "conv2/bn"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2/bn"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
   bias_term: false
  }
}
layer {
  name: "conv3/bn"
  type: "BatchNorm"
  bottom: "conv3"
  top: "conv3/bn"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3/bn"
  top: "conv3/bn"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3/bn"
  top: "conv4"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
   bias_term: false
  }
}
layer {
  name: "conv4/bn"
  type: "BatchNorm"
  bottom: "conv4"
  top: "conv4/bn"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}

layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4/bn"
  top: "conv4/bn"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4/bn"
  top: "conv5"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "conv5/bn"
  type: "BatchNorm"
  bottom: "conv5"
  top: "conv5/bn"
  batch_norm_param {
    moving_average_fraction: 0.9
    eps: 0.0001
    scale_bias: true
  }
}

layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5/bn"
  top: "conv5/bn"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5/bn"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8"
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
}
layer {
  name: "top-1"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  top: "accuracy/top-1"
  accuracy_param { top_k: 1 }
#  include { phase: TEST }
}
layer {
  name: "top-5"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  top: "accuracy/top-5"
  accuracy_param { top_k: 5 }
  include { phase: TEST }
}
